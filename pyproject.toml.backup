[build-system]
requires = ["setuptools>=68.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "egw-query-expansion"
version = "1.0.0"
description = "EGW Query Expansion system with hybrid retrieval and phase layering enforcement"
authors = [
    {name = "EGW Team", email = "team@egw.ai"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
[project.urls]
Homepage = "https://github.com/egw/egw-query-expansion"
Repository = "https://github.com/egw/egw-query-expansion"
Documentation = "https://egw-query-expansion.readthedocs.io/"

[tool.setuptools.packages.find]
where = ["."]
include = ["canonical_flow*", "egw_query_expansion*"]

# Phase-based architecture import linting
[tool.import-linter]
root_package = "."

[[tool.import-linter.contracts]]
name = "Phase Isolation Contract"
type = "independence"
modules = [
    "phases.I",
    "phases.X", 
    "phases.K",
    "phases.A",
    "phases.L",
    "phases.R",
    "phases.O",
    "phases.G",
    "phases.T",
    "phases.S"
]

[[tool.import-linter.contracts]]
name = "Phase API Enforcement"
type = "forbidden"
source_modules = [
    "phases.I",
    "phases.X",
    "phases.K", 
    "phases.A",
    "phases.L",
    "phases.R",
    "phases.O",
    "phases.G",
    "phases.T",
    "phases.S"
]
forbidden_modules = [
    "canonical_flow.I_ingestion_preparation.pdf_reader",
    "canonical_flow.I_ingestion_preparation.advanced_loader",
    "canonical_flow.I_ingestion_preparation.feature_extractor",
    "canonical_flow.X_context_construction.context_adapter",
    "canonical_flow.X_context_construction.lineage_tracker",
    "canonical_flow.K_knowledge_extraction.*", 
    "canonical_flow.A_analysis_nlp.*",
    "canonical_flow.L_classification_evaluation.*",
    "canonical_flow.R_search_retrieval.*",
    "canonical_flow.O_orchestration_control.*",
    "canonical_flow.G_aggregation_reporting.*",
    "canonical_flow.T_integration_storage.*",
    "canonical_flow.S_synthesis_output.*"
]
unmatched_ignore_imports = [
    "canonical_flow.*.ingestion_orchestrator",
    "canonical_flow.*.orchestrator",
    "canonical_flow.*.*_orchestrator"
]

# Canonical flow phase layer enforcement
[[tool.import-linter.contracts]]
name = "Phase Layer Enforcement: Ingestion → Context Construction"
type = "forbidden"
source_modules = [
    "canonical_flow.X_context_construction",
]
forbidden_modules = [
    "canonical_flow.I_ingestion_preparation",
]

[[tool.import-linter.contracts]]
name = "Phase Layer Enforcement: Context Construction → Knowledge Extraction"
type = "forbidden"
source_modules = [
    "canonical_flow.K_knowledge_extraction",
]
forbidden_modules = [
    "canonical_flow.I_ingestion_preparation",
    "canonical_flow.X_context_construction",
]

[[tool.import-linter.contracts]]
name = "Phase Layer Enforcement: Knowledge Extraction → Analysis NLP"
type = "forbidden"
source_modules = [
    "canonical_flow.A_analysis_nlp",
]
forbidden_modules = [
    "canonical_flow.I_ingestion_preparation",
    "canonical_flow.X_context_construction",
    "canonical_flow.K_knowledge_extraction",
]

[[tool.import-linter.contracts]]
name = "Phase Layer Enforcement: Analysis NLP → Classification Evaluation"
type = "forbidden"
source_modules = [
    "canonical_flow.L_classification_evaluation",
]
forbidden_modules = [
    "canonical_flow.I_ingestion_preparation",
    "canonical_flow.X_context_construction",
    "canonical_flow.K_knowledge_extraction",
    "canonical_flow.A_analysis_nlp",
]

[[tool.import-linter.contracts]]
name = "Phase Layer Enforcement: Classification Evaluation → Search Retrieval"
type = "forbidden"
source_modules = [
    "canonical_flow.R_search_retrieval",
]
forbidden_modules = [
    "canonical_flow.I_ingestion_preparation",
    "canonical_flow.X_context_construction",
    "canonical_flow.K_knowledge_extraction",
    "canonical_flow.A_analysis_nlp",
    "canonical_flow.L_classification_evaluation",
]

[[tool.import-linter.contracts]]
name = "Phase Layer Enforcement: Search Retrieval → Orchestration Control"
type = "forbidden"
source_modules = [
    "canonical_flow.O_orchestration_control",
]
forbidden_modules = [
    "canonical_flow.I_ingestion_preparation",
    "canonical_flow.X_context_construction",
    "canonical_flow.K_knowledge_extraction",
    "canonical_flow.A_analysis_nlp",
    "canonical_flow.L_classification_evaluation",
    "canonical_flow.R_search_retrieval",
]

[[tool.import-linter.contracts]]
name = "Phase Layer Enforcement: Orchestration Control → Aggregation Reporting"
type = "forbidden"
source_modules = [
    "canonical_flow.G_aggregation_reporting",
]
forbidden_modules = [
    "canonical_flow.I_ingestion_preparation",
    "canonical_flow.X_context_construction",
    "canonical_flow.K_knowledge_extraction",
    "canonical_flow.A_analysis_nlp",
    "canonical_flow.L_classification_evaluation",
    "canonical_flow.R_search_retrieval",
    "canonical_flow.O_orchestration_control",
]

[[tool.import-linter.contracts]]
name = "Phase Layer Enforcement: Aggregation Reporting → Integration Storage"
type = "forbidden"
source_modules = [
    "canonical_flow.T_integration_storage",
]
forbidden_modules = [
    "canonical_flow.I_ingestion_preparation",
    "canonical_flow.X_context_construction",
    "canonical_flow.K_knowledge_extraction",
    "canonical_flow.A_analysis_nlp",
    "canonical_flow.L_classification_evaluation",
    "canonical_flow.R_search_retrieval",
    "canonical_flow.O_orchestration_control",
    "canonical_flow.G_aggregation_reporting",
]

[[tool.import-linter.contracts]]
name = "Phase Layer Enforcement: Integration Storage → Synthesis Output"
type = "forbidden"
source_modules = [
    "canonical_flow.S_synthesis_output",
]
forbidden_modules = [
    "canonical_flow.I_ingestion_preparation",
    "canonical_flow.X_context_construction",
=======
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.urls]
Homepage = "https://github.com/egw/egw-query-expansion"
Repository = "https://github.com/egw/egw-query-expansion"
Documentation = "https://egw-query-expansion.readthedocs.io/"

[tool.setuptools.packages.find]
where = ["."]
include = ["canonical_flow*", "egw_query_expansion*"]

[tool.importlinter]
root_packages = ["canonical_flow"]

[[tool.importlinter.contracts]]
name = "Phase Layering Enforcement Contract"
type = "layers"
layers = [
    "canonical_flow.I_ingestion_preparation",
    "canonical_flow.X_context_construction", 
    "canonical_flow.K_knowledge_extraction",
    "canonical_flow.A_analysis_nlp",
    "canonical_flow.L_classification_evaluation",
    "canonical_flow.R_search_retrieval",
    "canonical_flow.O_orchestration_control",
    "canonical_flow.G_aggregation_reporting",
    "canonical_flow.T_integration_storage",
    "canonical_flow.S_synthesis_output"
]

[[tool.importlinter.contracts]]
name = "Phase Independence Contract" 
type = "independence"
modules = [
    "canonical_flow.I_ingestion_preparation",
    "canonical_flow.X_context_construction",
    "canonical_flow.K_knowledge_extraction", 
    "canonical_flow.A_analysis_nlp",
    "canonical_flow.L_classification_evaluation",
    "canonical_flow.R_search_retrieval",
    "canonical_flow.O_orchestration_control",
    "canonical_flow.G_aggregation_reporting",
    "canonical_flow.T_integration_storage",
    "canonical_flow.S_synthesis_output"
]

[[tool.importlinter.contracts]]
name = "Mathematical Enhancers Isolation Contract"
type = "forbidden"
forbidden_modules = [
    "canonical_flow.mathematical_enhancers"
]
source_modules = [
    "canonical_flow.I_ingestion_preparation",
    "canonical_flow.X_context_construction", 
>>>>>>> 38ca2a9 (Implement phase layering enforcement with import-linter and CI fitness functions for canonical sequence dependencies)
    "canonical_flow.K_knowledge_extraction",
    "canonical_flow.A_analysis_nlp",
    "canonical_flow.L_classification_evaluation",
    "canonical_flow.R_search_retrieval",
    "canonical_flow.O_orchestration_control",
    "canonical_flow.G_aggregation_reporting",
    "canonical_flow.T_integration_storage",
<<<<<<< HEAD
]

[[tool.import-linter.contracts]]
name = "No Cross-Phase Direct Imports"
type = "forbidden"
source_modules = [
    "phases.*"
]
forbidden_modules = [
    "phases.I.internal",
    "phases.X.internal",
    "phases.K.internal",
    "phases.A.internal", 
    "phases.L.internal",
    "phases.R.internal",
    "phases.O.internal",
    "phases.G.internal",
    "phases.T.internal",
    "phases.S.internal"
]

[[tool.import-linter.contracts]]
name = "Canonical Flow Backward Compatibility"
type = "forbidden"
source_modules = [
    "canonical_flow.*"
]
forbidden_modules = [
    "phases.*"
]
ignore_imports = [
    "phases -> canonical_flow.*"
=======
    "canonical_flow.S_synthesis_output"
]

[[tool.importlinter.contracts]]
name = "Backward Dependency Prevention Contract"
type = "forbidden"
forbidden_modules = ["canonical_flow.I_ingestion_preparation"]
source_modules = [
    "canonical_flow.X_context_construction",
    "canonical_flow.K_knowledge_extraction", 
    "canonical_flow.A_analysis_nlp",
    "canonical_flow.L_classification_evaluation",
    "canonical_flow.R_search_retrieval",
    "canonical_flow.O_orchestration_control",
    "canonical_flow.G_aggregation_reporting",
    "canonical_flow.T_integration_storage",
    "canonical_flow.S_synthesis_output"
]

[[tool.importlinter.contracts]]
name = "X Context Construction Isolation Contract"
type = "forbidden"
forbidden_modules = [
    "canonical_flow.I_ingestion_preparation",
    "canonical_flow.X_context_construction"
]
source_modules = [
    "canonical_flow.K_knowledge_extraction",
    "canonical_flow.A_analysis_nlp",
    "canonical_flow.L_classification_evaluation",
    "canonical_flow.R_search_retrieval", 
    "canonical_flow.O_orchestration_control",
    "canonical_flow.G_aggregation_reporting",
    "canonical_flow.T_integration_storage",
    "canonical_flow.S_synthesis_output"
]

[[tool.importlinter.contracts]]
name = "K Knowledge Extraction Isolation Contract"
type = "forbidden"
forbidden_modules = [
    "canonical_flow.I_ingestion_preparation",
    "canonical_flow.X_context_construction",
    "canonical_flow.K_knowledge_extraction"
]
source_modules = [
    "canonical_flow.A_analysis_nlp",
    "canonical_flow.L_classification_evaluation",
    "canonical_flow.R_search_retrieval",
    "canonical_flow.O_orchestration_control",
    "canonical_flow.G_aggregation_reporting",
    "canonical_flow.T_integration_storage",
    "canonical_flow.S_synthesis_output"
]

[[tool.importlinter.contracts]]
name = "A Analysis NLP Isolation Contract"
type = "forbidden"
forbidden_modules = [
    "canonical_flow.I_ingestion_preparation",
    "canonical_flow.X_context_construction", 
    "canonical_flow.K_knowledge_extraction",
    "canonical_flow.A_analysis_nlp"
]
source_modules = [
    "canonical_flow.L_classification_evaluation",
    "canonical_flow.R_search_retrieval",
    "canonical_flow.O_orchestration_control",
    "canonical_flow.G_aggregation_reporting",
    "canonical_flow.T_integration_storage", 
    "canonical_flow.S_synthesis_output"
]

[[tool.importlinter.contracts]]
name = "L Classification Evaluation Isolation Contract"
type = "forbidden"
forbidden_modules = [
    "canonical_flow.I_ingestion_preparation",
    "canonical_flow.X_context_construction",
    "canonical_flow.K_knowledge_extraction",
    "canonical_flow.A_analysis_nlp",
    "canonical_flow.L_classification_evaluation"
]
source_modules = [
    "canonical_flow.R_search_retrieval",
    "canonical_flow.O_orchestration_control",
    "canonical_flow.G_aggregation_reporting",
    "canonical_flow.T_integration_storage",
    "canonical_flow.S_synthesis_output"
]

[[tool.importlinter.contracts]]
name = "R Search Retrieval Isolation Contract"
type = "forbidden"
forbidden_modules = [
    "canonical_flow.I_ingestion_preparation",
    "canonical_flow.X_context_construction",
    "canonical_flow.K_knowledge_extraction", 
    "canonical_flow.A_analysis_nlp",
    "canonical_flow.L_classification_evaluation",
    "canonical_flow.R_search_retrieval"
]
source_modules = [
    "canonical_flow.O_orchestration_control",
    "canonical_flow.G_aggregation_reporting",
    "canonical_flow.T_integration_storage",
    "canonical_flow.S_synthesis_output"
]

[[tool.importlinter.contracts]]
name = "O Orchestration Control Isolation Contract"
type = "forbidden"
forbidden_modules = [
    "canonical_flow.I_ingestion_preparation",
    "canonical_flow.X_context_construction",
    "canonical_flow.K_knowledge_extraction",
    "canonical_flow.A_analysis_nlp",
    "canonical_flow.L_classification_evaluation",
    "canonical_flow.R_search_retrieval",
    "canonical_flow.O_orchestration_control"
]
source_modules = [
    "canonical_flow.G_aggregation_reporting",
    "canonical_flow.T_integration_storage",
    "canonical_flow.S_synthesis_output"
]

[[tool.importlinter.contracts]]
name = "G Aggregation Reporting Isolation Contract"
type = "forbidden"
forbidden_modules = [
    "canonical_flow.I_ingestion_preparation",
    "canonical_flow.X_context_construction",
    "canonical_flow.K_knowledge_extraction",
    "canonical_flow.A_analysis_nlp",
    "canonical_flow.L_classification_evaluation", 
    "canonical_flow.R_search_retrieval",
    "canonical_flow.O_orchestration_control",
    "canonical_flow.G_aggregation_reporting"
]
source_modules = [
    "canonical_flow.T_integration_storage",
    "canonical_flow.S_synthesis_output"
]

[[tool.importlinter.contracts]]
name = "T Integration Storage Isolation Contract"
type = "forbidden"
forbidden_modules = [
    "canonical_flow.I_ingestion_preparation",
    "canonical_flow.X_context_construction",
    "canonical_flow.K_knowledge_extraction",
    "canonical_flow.A_analysis_nlp",
    "canonical_flow.L_classification_evaluation",
    "canonical_flow.R_search_retrieval",
    "canonical_flow.O_orchestration_control",
    "canonical_flow.G_aggregation_reporting",
    "canonical_flow.T_integration_storage"
]
source_modules = [
    "canonical_flow.S_synthesis_output"
>>>>>>> 38ca2a9 (Implement phase layering enforcement with import-linter and CI fitness functions for canonical sequence dependencies)
]

[tool.black]
line-length = 88
<<<<<<< HEAD
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
=======
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | venv
  | build
  | dist
  | \.eggs
>>>>>>> 38ca2a9 (Implement phase layering enforcement with import-linter and CI fitness functions for canonical sequence dependencies)
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
<<<<<<< HEAD
known_first_party = ["canonical_flow", "egw_query_expansion", "phases"]
=======
known_first_party = ["canonical_flow", "egw_query_expansion"]
>>>>>>> 38ca2a9 (Implement phase layering enforcement with import-linter and CI fitness functions for canonical sequence dependencies)

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
<<<<<<< HEAD
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
=======
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
>>>>>>> 38ca2a9 (Implement phase layering enforcement with import-linter and CI fitness functions for canonical sequence dependencies)
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
<<<<<<< HEAD
testpaths = ["tests", "architecture_tests"]
python_files = ["test_*.py", "*_test.py", "test*.py"]
python_classes = ["Test*", "*Test"]
python_functions = ["test_*", "*_test"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=canonical_flow",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "architecture: marks tests as architecture fitness function tests",
    "phase_enforcement: marks tests as phase layer enforcement tests",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
=======
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
    "canonical_flow/*/test_*.py",
    "egw_query_expansion/tests"
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
>>>>>>> 38ca2a9 (Implement phase layering enforcement with import-linter and CI fitness functions for canonical sequence dependencies)
]