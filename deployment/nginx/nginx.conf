events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging configuration
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Request size limits for document processing
    client_max_body_size 100M;
    client_body_buffer_size 128k;
    client_body_timeout 60s;
    client_header_timeout 60s;
    
    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        text/css
        text/javascript
        text/xml
        text/plain
        text/x-component;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/m;
    limit_req_zone $binary_remote_addr zone=bulk:10m rate=10r/m;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=perip:10m;
    limit_conn_zone $server_name zone=perserver:10m;

    # Upstream configuration for EGW services
    upstream egw_backend {
        least_conn;  # Load balancing method
        
        # EGW service instances with health checks
        server egw-service_1:8000 max_fails=3 fail_timeout=30s weight=1;
        server egw-service_2:8000 max_fails=3 fail_timeout=30s weight=1;
        server egw-service_3:8000 max_fails=3 fail_timeout=30s weight=1;
        
        # Keepalive connections to backend
        keepalive 32;
    }

    # Upstream for worker services (background processing)
    upstream egw_workers {
        ip_hash;  # Sticky sessions for stateful processing
        
        server egw-worker_1:8001 max_fails=2 fail_timeout=20s;
        server egw-worker_2:8001 max_fails=2 fail_timeout=20s;
        server egw-worker_3:8001 max_fails=2 fail_timeout=20s;
        server egw-worker_4:8001 max_fails=2 fail_timeout=20s;
        server egw-worker_5:8001 max_fails=2 fail_timeout=20s;
        server egw-worker_6:8001 max_fails=2 fail_timeout=20s;
    }

    # Cache configuration
    proxy_cache_path /tmp/nginx_cache levels=1:2 keys_zone=api_cache:10m 
                     max_size=1g inactive=60m use_temp_path=off;

    # Main server configuration
    server {
        listen 80;
        server_name localhost egw-pipeline.local;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Connection limits
        limit_conn perip 20;
        limit_conn perserver 1000;

        # Health check endpoint (bypass rate limiting)
        location /health {
            proxy_pass http://egw_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Fast health check settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }

        # Metrics endpoint for monitoring
        location /metrics {
            proxy_pass http://egw_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # Only allow from monitoring systems
            allow 172.20.0.0/16;  # Docker network
            allow 127.0.0.1;
            deny all;
        }

        # API endpoints with rate limiting
        location /api/process {
            # Bulk processing rate limit
            limit_req zone=bulk burst=5 nodelay;
            
            proxy_pass http://egw_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Long timeout for document processing
            proxy_connect_timeout 60s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # Enable request buffering for large documents
            proxy_request_buffering on;
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # Add processing headers
            add_header X-Processing-Node $upstream_addr;
            add_header X-Response-Time $upstream_response_time;
        }

        # Batch processing endpoint (routed to workers)
        location /api/batch {
            limit_req zone=bulk burst=2 nodelay;
            
            proxy_pass http://egw_workers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Very long timeout for batch processing
            proxy_connect_timeout 60s;
            proxy_send_timeout 600s;
            proxy_read_timeout 600s;
            
            # Disable buffering for streaming responses
            proxy_buffering off;
            proxy_cache off;
            
            # Add batch processing headers
            add_header X-Batch-Worker $upstream_addr;
            add_header X-Batch-Processing "true";
        }

        # Standard API endpoints
        location /api/ {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://egw_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Standard timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Enable caching for GET requests
            proxy_cache api_cache;
            proxy_cache_valid 200 302 10m;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_lock on;
            
            # Add cache status header
            add_header X-Cache-Status $upstream_cache_status;
        }

        # WebSocket support for real-time updates
        location /ws {
            proxy_pass http://egw_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket specific timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 3600s;
            proxy_read_timeout 3600s;
        }

        # Static file serving (documentation, assets)
        location /static/ {
            proxy_pass http://egw_backend;
            proxy_cache api_cache;
            proxy_cache_valid 200 1h;
            proxy_cache_valid 404 1m;
            
            # Long cache for static assets
            expires 1h;
            add_header Cache-Control "public, immutable";
        }

        # Default location
        location / {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://egw_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Standard timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Error pages
        error_page 429 @ratelimit;
        location @ratelimit {
            add_header Content-Type application/json always;
            return 429 '{"error": "Rate limit exceeded", "retry_after": 60}';
        }

        error_page 502 503 504 @maintenance;
        location @maintenance {
            add_header Content-Type application/json always;
            return 503 '{"error": "Service temporarily unavailable", "message": "Pipeline is processing requests"}';
        }
    }

    # HTTPS server configuration (optional, requires SSL certificates)
    server {
        listen 443 ssl http2;
        server_name localhost egw-pipeline.local;

        # SSL Configuration (update paths as needed)
        # ssl_certificate /etc/nginx/ssl/cert.pem;
        # ssl_certificate_key /etc/nginx/ssl/key.pem;
        
        # Modern SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # HSTS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Redirect HTTP to HTTPS
        if ($scheme != "https") {
            return 301 https://$server_name$request_uri;
        }

        # Use same location blocks as HTTP server
        include /etc/nginx/conf.d/locations.conf;
    }

    # NGINX status page for monitoring
    server {
        listen 8080;
        server_name localhost;
        
        location /nginx_status {
            stub_status on;
            allow 172.20.0.0/16;  # Docker network
            allow 127.0.0.1;
            deny all;
        }
    }
}