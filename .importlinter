# Import Linter Configuration for Phase Isolation and Layering Enforcement

[importlinter]
root_packages = 
    canonical_flow
root_package = "."

# Basic canonical flow phase test
[[importlinter.contracts]]
name = "Basic Phase Test"
type = "independence"
modules = 
    canonical_flow.I_ingestion_preparation
    canonical_flow.X_context_construction

# Phase Layering Enforcement Contract
[[importlinter.contracts]]
name = "Phase Layering Enforcement Contract"
type = "layers"
layers = [
    "canonical_flow.I_ingestion_preparation",
    "canonical_flow.X_context_construction", 
    "canonical_flow.K_knowledge_extraction",
    "canonical_flow.A_analysis_nlp",
    "canonical_flow.L_classification_evaluation",
    "canonical_flow.R_search_retrieval",
    "canonical_flow.O_orchestration_control",
    "canonical_flow.G_aggregation_reporting",
    "canonical_flow.T_integration_storage",
    "canonical_flow.S_synthesis_output"
]

# Phase Independence Contract
[[importlinter.contracts]] 
name = "Phase Independence Contract"
type = "independence"
modules = [
    "canonical_flow.I_ingestion_preparation",
    "canonical_flow.X_context_construction",
    "canonical_flow.K_knowledge_extraction", 
    "canonical_flow.A_analysis_nlp",
    "canonical_flow.L_classification_evaluation",
    "canonical_flow.R_search_retrieval",
    "canonical_flow.O_orchestration_control",
    "canonical_flow.G_aggregation_reporting",
    "canonical_flow.T_integration_storage",
    "canonical_flow.S_synthesis_output"
]

# Mathematical Enhancers Isolation
[[importlinter.contracts]]
name = "Mathematical Enhancers Isolation Contract"
type = "forbidden"
forbidden_modules = [
    "canonical_flow.mathematical_enhancers"
]
source_modules = [
    "canonical_flow.I_ingestion_preparation",
    "canonical_flow.X_context_construction", 
    "canonical_flow.K_knowledge_extraction",
    "canonical_flow.A_analysis_nlp",
    "canonical_flow.L_classification_evaluation",
    "canonical_flow.R_search_retrieval",
    "canonical_flow.O_orchestration_control",
    "canonical_flow.G_aggregation_reporting",
    "canonical_flow.T_integration_storage",
    "canonical_flow.S_synthesis_output"
]

# Backward Dependency Prevention
[[importlinter.contracts]]
name = "Backward Dependency Prevention Contract"
type = "forbidden"
forbidden_modules = ["canonical_flow.I_ingestion_preparation"]
source_modules = [
    "canonical_flow.X_context_construction",
    "canonical_flow.K_knowledge_extraction", 
    "canonical_flow.A_analysis_nlp",
    "canonical_flow.L_classification_evaluation",
    "canonical_flow.R_search_retrieval",
    "canonical_flow.O_orchestration_control",
    "canonical_flow.G_aggregation_reporting",
    "canonical_flow.T_integration_storage",
    "canonical_flow.S_synthesis_output"
]

[importlinter:contract:phase_isolation]
name = "Phase Isolation Contract"
type = "independence"
modules = [
    "phases.I",
    "phases.X",
    "phases.K",
    "phases.A", 
    "phases.L",
    "phases.R",
    "phases.O",
    "phases.G",
    "phases.T",
    "phases.S"
]

[importlinter:contract:api_enforcement]
name = "Phase API Enforcement"
type = "forbidden"
source_modules = [
    "phases.I",
    "phases.X", 
    "phases.K",
    "phases.A",
    "phases.L",
    "phases.R",
    "phases.O",
    "phases.G",
    "phases.T",
    "phases.S"
]
forbidden_modules = [
    "canonical_flow.I_ingestion_preparation.pdf_reader",
    "canonical_flow.I_ingestion_preparation.advanced_loader",
    "canonical_flow.I_ingestion_preparation.feature_extractor",
    "canonical_flow.I_ingestion_preparation.normative_validator",
    "canonical_flow.I_ingestion_preparation.raw_data_generator",
    "canonical_flow.X_context_construction.context_adapter",
    "canonical_flow.X_context_construction.lineage_tracker",
    "canonical_flow.X_context_construction.immutable_context",
    "canonical_flow.K_knowledge_extraction.*",
    "canonical_flow.A_analysis_nlp.*", 
    "canonical_flow.L_classification_evaluation.*",
    "canonical_flow.R_search_retrieval.*",
    "canonical_flow.O_orchestration_control.*",
    "canonical_flow.G_aggregation_reporting.*", 
    "canonical_flow.T_integration_storage.*",
    "canonical_flow.S_synthesis_output.*"
]
unmatched_ignore_imports = [
    "canonical_flow.*.ingestion_orchestrator",
    "canonical_flow.*.*_orchestrator",
    "canonical_flow.*.orchestrator"
]