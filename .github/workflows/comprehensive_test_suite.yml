name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  comprehensive-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-core.txt || true
        pip install pytest pytest-cov bandit flake8 black isort mypy
        pip install tomli tomllib || true  # For Python < 3.11 TOML support
    
    - name: Validate installation
      run: |
        python validate_installation.py || echo "Installation validation failed, continuing with tests"
    
    - name: Run syntax validation tests
      run: |
        echo "Running syntax validation tests..."
        pytest tests/syntax_validation_test.py -v --tb=short
    
    - name: Run security regression tests
      run: |
        echo "Running security regression tests..."
        pytest tests/security_regression_test.py -v --tb=short
    
    - name: Run phase annotation tests
      run: |
        echo "Running phase annotation tests..."
        pytest tests/phase_annotation_test.py -v --tb=short
    
    - name: Run deterministic execution tests
      run: |
        echo "Running deterministic execution tests..."
        pytest tests/deterministic_execution_test.py -v --tb=short
    
    - name: Run comprehensive test suite
      run: |
        echo "Running all comprehensive tests together..."
        pytest tests/syntax_validation_test.py tests/security_regression_test.py tests/phase_annotation_test.py tests/deterministic_execution_test.py -v --cov=egw_query_expansion --cov-report=xml --cov-report=html
    
    - name: Run existing test suite
      run: |
        echo "Running existing tests to ensure compatibility..."
        pytest tests/ -k "not (syntax_validation or security_regression or phase_annotation or deterministic_execution)" --tb=short || echo "Some existing tests failed"
    
    - name: Upload coverage reports
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: comprehensive-tests
        name: codecov-umbrella

  lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit
    
    - name: Run Black formatter check
      run: |
        black --check tests/syntax_validation_test.py tests/security_regression_test.py tests/phase_annotation_test.py tests/deterministic_execution_test.py
    
    - name: Run isort import sorting check
      run: |
        isort --check-only tests/syntax_validation_test.py tests/security_regression_test.py tests/phase_annotation_test.py tests/deterministic_execution_test.py
    
    - name: Run flake8 linting
      run: |
        flake8 tests/syntax_validation_test.py tests/security_regression_test.py tests/phase_annotation_test.py tests/deterministic_execution_test.py --max-line-length=100
    
    - name: Run mypy type checking
      run: |
        mypy tests/syntax_validation_test.py tests/security_regression_test.py tests/phase_annotation_test.py tests/deterministic_execution_test.py --ignore-missing-imports
    
    - name: Run bandit security check on new test files
      run: |
        bandit -r tests/syntax_validation_test.py tests/security_regression_test.py tests/phase_annotation_test.py tests/deterministic_execution_test.py -f json

  integration-tests:
    runs-on: ubuntu-latest
    needs: comprehensive-tests
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run integration with existing architecture tests
      run: |
        pytest tests/ architecture_tests/ -k "architecture or phase_enforcement" --tb=short || echo "Some architecture tests failed"
    
    - name: Test comprehensive suite with existing markers
      run: |
        pytest tests/ --tb=short -m "syntax_validation or security_regression or phase_annotation or deterministic_execution"