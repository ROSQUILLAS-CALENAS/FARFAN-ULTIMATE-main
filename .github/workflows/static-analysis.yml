name: Static Analysis Firewall

on:
  push:
    branches: [ main, develop, "feature/*" ]
  pull_request:
    branches: [ main, develop ]

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -e .
        # Additional static analysis tools
        pip install mypy pyright ruff bandit pre-commit
        
    - name: Install type stubs
      run: |
        pip install types-PyYAML types-requests types-setuptools types-toml
        
    - name: Create stub directories
      run: |
        mkdir -p stubs
        
    - name: Run Ruff linting (TCH and I rules)
      run: |
        ruff check --select=TCH,I --output-format=github .
        
    - name: Run Ruff formatting check
      run: |
        ruff format --check --diff .
        
    - name: Run MyPy strict type checking
      run: |
        mypy --config-file=mypy.ini egw_query_expansion/ src/ scripts/
      continue-on-error: false
      
    - name: Run Pyright type checking
      run: |
        pyright --project=pyproject.toml
      continue-on-error: false
      
    - name: Run Bandit security analysis
      run: |
        # Create Bandit configuration for enhanced security scanning
        cat > .bandit << EOF
        [bandit]
        exclude_dirs = ["/tests", "/test", "/.git", "/venv", "/.venv"]
        skips = []
        tests = ["B101", "B102", "B103", "B104", "B105", "B106", "B107", "B108", "B110", "B112", "B201", "B301", "B302", "B303", "B304", "B305", "B306", "B307", "B308", "B309", "B310", "B311", "B312", "B313", "B314", "B315", "B316", "B317", "B318", "B319", "B320", "B321", "B322", "B323", "B324", "B325", "B401", "B402", "B403", "B404", "B405", "B406", "B407", "B408", "B409", "B410", "B411", "B412", "B413", "B501", "B502", "B503", "B504", "B505", "B506", "B507", "B601", "B602", "B603", "B604", "B605", "B606", "B607", "B608", "B609", "B610", "B611", "B701", "B702", "B703"]
        EOF
        
        # Run Bandit with comprehensive security checks
        bandit -r egw_query_expansion/ src/ scripts/ . -c .bandit -f json -o bandit-report.json || BANDIT_EXIT_CODE=$?
        bandit -r egw_query_expansion/ src/ scripts/ . -c .bandit -f txt -o bandit-report.txt || true
        
        # Display the text report
        cat bandit-report.txt
        
        # Check for high severity issues that should fail the build
        HIGH_SEVERITY=$(jq -r '.results[] | select(.issue_severity == "HIGH") | length' bandit-report.json | wc -l)
        MEDIUM_SEVERITY=$(jq -r '.results[] | select(.issue_severity == "MEDIUM") | length' bandit-report.json | wc -l)
        
        echo "High severity issues: $HIGH_SEVERITY"
        echo "Medium severity issues: $MEDIUM_SEVERITY"
        
        # Fail build on high severity issues
        if [ "$HIGH_SEVERITY" -gt 0 ]; then
          echo "❌ Build failed due to $HIGH_SEVERITY high severity security issues"
          echo "Please review and fix all high severity security vulnerabilities"
          exit 1
        fi
        
        # Warn about medium severity issues but don't fail build
        if [ "$MEDIUM_SEVERITY" -gt 0 ]; then
          echo "⚠️ Warning: $MEDIUM_SEVERITY medium severity security issues found"
          echo "Consider reviewing and addressing these issues"
        fi
        
        echo "✅ Bandit security scan completed successfully"
      continue-on-error: false
      
    - name: Run import validation
      run: |
        python scripts/validate_imports.py
      continue-on-error: false
      
    - name: Run circular import detection
      run: |
        python scripts/detect_circular_imports.py
      continue-on-error: false
      
    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report-${{ matrix.python-version }}
        path: |
          bandit-report.json
          bandit-report.txt
          .bandit
        
    - name: Fail on any static analysis violations
      if: failure()
      run: |
        echo "❌ Static analysis violations detected!"
        echo "All static analysis checks must pass before merging."
        exit 1

  dependency-analysis:
    runs-on: ubuntu-latest
    needs: static-analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Install analysis tools
      run: |
        python -m pip install --upgrade pip
        pip install pipdeptree safety pip-audit
        
    - name: Analyze dependency tree
      run: |
        pipdeptree --json-tree > dependency-tree.json
        pipdeptree --graph-output png > dependency-graph.png
        
    - name: Security audit with Safety
      run: |
        safety check --json --output safety-report.json || true
        safety check
        
    - name: Security audit with pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit
        
    - name: Upload dependency reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-analysis-reports
        path: |
          dependency-tree.json
          dependency-graph.png
          safety-report.json
          pip-audit-report.json

  pre-commit-validation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit
        
    - name: Cache pre-commit
      uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
        
    - name: Install pre-commit hooks
      run: pre-commit install
      
    - name: Run pre-commit on all files
      run: pre-commit run --all-files --show-diff-on-failure
      
    - name: Validate pre-commit configuration
      run: pre-commit validate-config

  type-coverage:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mypy[reports]
        
    - name: Generate type coverage report
      run: |
        mypy --config-file=mypy.ini --html-report=mypy-reports --txt-report=mypy-reports egw_query_expansion/ src/ scripts/
      continue-on-error: true
      
    - name: Upload type coverage report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: type-coverage-report
        path: mypy-reports/