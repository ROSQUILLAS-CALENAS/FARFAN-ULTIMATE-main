{
  "project_root": "/Users/recovered/PycharmProjects/FARFAN-ULTIMATE/egw_query_expansion/core",
  "summary": {
    "total_files": 19,
    "total_modules": 18,
    "languages": {
      "python": 18
    },
    "module_types": {
      "general": 17,
      "controller": 1
    }
  },
  "modules": {
    "conformal_risk_control.py": {
      "type": "general",
      "language": "python",
      "size": 59506
    },
    "m_c_c_engine_monotone_compliance_evaluator.py": {
      "type": "general",
      "language": "python",
      "size": 21302
    },
    "deterministic_router.py": {
      "type": "controller",
      "language": "python",
      "size": 22641
    },
    "m_c_c_label_evaluation_engine.py": {
      "type": "general",
      "language": "python",
      "size": 21302
    },
    "project_analyzer.py": {
      "type": "general",
      "language": "python",
      "size": 33418
    },
    "immutable_context.py": {
      "type": "general",
      "language": "python",
      "size": 16569
    },
    "hybrid_retrieval.py": {
      "type": "general",
      "language": "python",
      "size": 336
    },
    "query_generator.py": {
      "type": "general",
      "language": "python",
      "size": 552
    },
    "confluent_orchestrator.py": {
      "type": "general",
      "language": "python",
      "size": 21514
    },
    "pattern_matcher.py": {
      "type": "general",
      "language": "python",
      "size": 339
    },
    "__init__.py": {
      "type": "general",
      "language": "python",
      "size": 3864
    },
    "context_adapter.py": {
      "type": "general",
      "language": "python",
      "size": 4953
    },
    "gw_alignment.py": {
      "type": "general",
      "language": "python",
      "size": 1421
    },
    "total_ordering.py": {
      "type": "general",
      "language": "python",
      "size": 13862
    },
    "submodular_task_selector.py": {
      "type": "general",
      "language": "python",
      "size": 16281
    },
    "permutation_invariant_processor.py": {
      "type": "general",
      "language": "python",
      "size": 18007
    },
    "linear_type_enforcer.py": {
      "type": "general",
      "language": "python",
      "size": 10784
    },
    "task_selector_demo.py": {
      "type": "general",
      "language": "python",
      "size": 14345
    }
  },
  "dependencies": {},
  "imports": {
    "conformal_risk_control.py": [
      "hashlib",
      "scipy.stats",
      "abc",
      "json",
      "sklearn.model_selection",
      "logging",
      "warnings",
      "numpy",
      "dataclasses",
      "pickle",
      "pathlib",
      "scipy",
      "collections",
      "datetime",
      "typing"
    ],
    "m_c_c_engine_monotone_compliance_evaluator.py": [
      "dataclasses",
      "__future__",
      "typing"
    ],
    "deterministic_router.py": [
      "hashlib",
      "abc",
      "json",
      "logging",
      "numpy",
      "dataclasses",
      "enum",
      "math",
      "functools",
      "datetime",
      "typing"
    ],
    "m_c_c_label_evaluation_engine.py": [
      "dataclasses",
      "__future__",
      "typing"
    ],
    "project_analyzer.py": [
      "xml.etree.ElementTree",
      "json",
      "os",
      "traceback",
      "toml",
      "subprocess",
      "ast",
      "sys",
      "pathlib",
      "yaml",
      "re",
      "collections",
      "argparse",
      "typing"
    ],
    "immutable_context.py": [
      "hashlib",
      "abc",
      "uuid",
      "json",
      "datetime",
      "dataclasses",
      "secrets",
      "collections.abc",
      "hmac",
      "typing"
    ],
    "confluent_orchestrator.py": [
      "hashlib",
      "time",
      "uuid",
      "asyncio",
      "dataclasses",
      "enum",
      "threading",
      "random",
      "collections",
      "concurrent.futures",
      "typing"
    ],
    "__init__.py": [
      "pattern_matcher",
      "permutation_invariant_processor",
      "deterministic_router",
      "linear_type_enforcer",
      "context_adapter",
      "conformal_risk_control",
      "hybrid_retrieval",
      "immutable_context",
      "total_ordering",
      "query_generator",
      "gw_alignment"
    ],
    "context_adapter.py": [
      "immutable_context",
      "typing"
    ],
    "gw_alignment.py": [
      "sys",
      "numpy",
      "pathlib",
      "gw_alignment"
    ],
    "total_ordering.py": [
      "json",
      "__future__",
      "dataclasses",
      "math",
      "collections",
      "typing"
    ],
    "submodular_task_selector.py": [
      "heapq",
      "abc",
      "logging",
      "dataclasses",
      "collections",
      "typing"
    ],
    "permutation_invariant_processor.py": [
      "hashlib",
      "torch.nn.functional",
      "logging",
      "torch.nn",
      "warnings",
      "numpy",
      "ast",
      "dataclasses",
      "torch",
      "enum",
      "platform",
      "collections",
      "typing"
    ],
    "linear_type_enforcer.py": [
      "contextlib",
      "warnings",
      "collections",
      "threading",
      "weakref",
      "immutable_context",
      "typing"
    ],
    "task_selector_demo.py": [
      "matplotlib.pyplot",
      "numpy",
      "egw_query_expansion.core.submodular_task_selector",
      "dataclasses",
      "typing"
    ]
  },
  "exports": {
    "conformal_risk_control.py": [
      "function:_compute_base_score",
      "function:_softmax",
      "function:construct_confidence_interval",
      "class:RiskCertificate",
      "function:compute_comprehensive_risk_bounds",
      "function:score",
      "function:get_diagnostics",
      "class:StatisticalBounds",
      "function:_cross_validate_coverage",
      "function:_assess_calibration_quality",
      "function:__post_init__",
      "class:NonconformityScore",
      "function:_compute_comprehensive_quantile",
      "function:get_score_statistics",
      "function:_compute_mmd",
      "function:batch_score",
      "function:get_metadata",
      "class:RegressionNonconformityScorer",
      "function:__init__",
      "function:fit_normalization",
      "function:fit_calibration",
      "function:save",
      "class:CoverageAnalysis",
      "function:to_dict",
      "function:comprehensive_coverage_analysis",
      "function:_compute_bootstrap_uncertainties",
      "function:get_comprehensive_diagnostics",
      "function:load",
      "class:RiskControlConfig",
      "function:pairwise_distance_1d",
      "function:contains",
      "function:validate_inputs",
      "function:is_significantly_different",
      "class:PredictionSet",
      "function:_compute_quantile_confidence_bounds",
      "function:rbf_kernel",
      "class:NonconformityScorer",
      "class:EnhancedConformalRiskController",
      "function:is_valid",
      "class:ClassificationNonconformityScorer",
      "function:construct_prediction_set",
      "function:generate_enhanced_certificate",
      "function:detect_distribution_shift",
      "function:_compute_energy_distance",
      "function:conservative_bound",
      "function:fit_adaptive_thresholds",
      "function:validate"
    ],
    "m_c_c_engine_monotone_compliance_evaluator.py": [
      "function:lt",
      "function:make_chain_poset",
      "class:KnowledgeBase",
      "function:ground",
      "class:MutualExclusion",
      "function:agg_sum_at_least",
      "class:MandatoryLiteral",
      "function:evaluate",
      "function:__post_init__",
      "function:f",
      "class:Rule",
      "function:topological_layers",
      "function:max_label",
      "function:__init__",
      "class:Derivation",
      "class:EvaluationResult",
      "function:get",
      "function:has_fact",
      "function:add_fact",
      "function:agg_count_at_least",
      "class:MCCEngine",
      "class:Aggregate",
      "function:clone",
      "class:LabelPoset",
      "class:Literal",
      "function:leq"
    ],
    "deterministic_router.py": [
      "function:_compute_routing_weights",
      "class:DeterministicRouter",
      "class:ActionType",
      "class:SeedDerivation",
      "function:_select_action_deterministic",
      "function:compute_convergence_metric",
      "function:compare_actions",
      "function:zeros_like",
      "function:__post_init__",
      "function:all",
      "class:RoutingDecision",
      "function:get_routing_statistics",
      "function:project_to_box",
      "function:where",
      "function:__init__",
      "function:from_query",
      "function:create_deterministic_router",
      "function:to_dict",
      "function:array",
      "function:route_query",
      "function:clip",
      "class:ConvexProjector",
      "class:ImmutableConfig",
      "function:config_hash",
      "class:RoutingContext",
      "function:derive_step_seed",
      "class:LexicographicComparator",
      "function:_compute_gradient",
      "function:reconstruct_path",
      "function:max",
      "function:verify_determinism",
      "function:generate_traceability_id",
      "function:argsort",
      "function:allclose",
      "function:routing_fn",
      "function:maximum",
      "function:project_to_simplex",
      "function:derive_seed",
      "class:MockNumPy"
    ],
    "m_c_c_label_evaluation_engine.py": [
      "function:lt",
      "function:make_chain_poset",
      "class:KnowledgeBase",
      "function:ground",
      "class:MutualExclusion",
      "function:agg_sum_at_least",
      "class:MandatoryLiteral",
      "function:evaluate",
      "function:__post_init__",
      "function:f",
      "class:Rule",
      "function:topological_layers",
      "function:max_label",
      "function:__init__",
      "class:Derivation",
      "class:EvaluationResult",
      "function:get",
      "function:has_fact",
      "function:add_fact",
      "function:agg_count_at_least",
      "class:MCCEngine",
      "class:Aggregate",
      "function:clone",
      "class:LabelPoset",
      "class:Literal",
      "function:leq"
    ],
    "project_analyzer.py": [
      "function:analyze_dockerfile",
      "function:analyze_gradle_deps",
      "function:scan_directory_structure",
      "class:ProjectAnalyzer",
      "function:analyze_js_file",
      "function:analyze_java_file",
      "function:analyze_python_deps",
      "function:check_environment_setup",
      "function:analyze_package_files",
      "function:analyze_python_file",
      "function:__init__",
      "function:is_external_package",
      "function:analyze_node_deps",
      "function:analyze_documentation",
      "function:analyze_source_files",
      "function:analyze_config_files",
      "function:analyze_makefile",
      "function:get_module_type",
      "function:analyze_tsconfig",
      "function:get_language",
      "function:generate_report",
      "function:analyze_maven_deps",
      "function:analyze_env_file",
      "function:analyze",
      "function:analyze_docker_compose",
      "function:count_module_types",
      "function:check_compilation_readiness",
      "function:generate_next_steps",
      "function:export_json_report",
      "function:count_languages",
      "function:main"
    ],
    "immutable_context.py": [
      "function:derive_with_question",
      "function:__contains__",
      "class:ImmutableDict",
      "function:_validate_acyclic",
      "function:derive_with_context",
      "function:metadata",
      "function:get_lineage",
      "function:__post_init__",
      "function:__exit__",
      "function:derive_with_expansion",
      "function:question_text",
      "function:__enter__",
      "function:_compute_integrity_hmac",
      "function:_generate_secret_key",
      "function:create_expanded_context",
      "function:__repr__",
      "function:_compute_integrity_hmac_for_id",
      "function:__iter__",
      "function:__delattr__",
      "function:__init__",
      "function:nodes",
      "function:assert_linear_reference",
      "function:derive",
      "function:_compute_nodes",
      "function:context_data",
      "function:create_question_context",
      "class:DerivationDAG",
      "function:__hash__",
      "function:add_edge",
      "function:__eq__",
      "function:verify_integrity",
      "function:has_cycle",
      "function:_compute_content_hash",
      "function:content_hash",
      "function:is_valid_context",
      "class:ImmutableContextManager",
      "class:DerivationEdge",
      "function:edges",
      "function:_deep_freeze",
      "function:__getitem__",
      "function:derivation_dag",
      "function:__len__",
      "class:QuestionContext",
      "function:remove",
      "class:ImmutableMetadata",
      "function:_assert_integrity",
      "function:__setattr__"
    ],
    "hybrid_retrieval.py": [
      "class:HybridRetriever",
      "function:__init__",
      "function:retrieve"
    ],
    "query_generator.py": [
      "function:generate_expanded_query",
      "class:QueryGenerator",
      "function:__init__",
      "function:generate_queries"
    ],
    "confluent_orchestrator.py": [
      "function:dfs",
      "function:_has_cycle_with_node",
      "class:NodeType",
      "function:associative_commutative_max",
      "class:ConfluentActor",
      "class:CvRDTState",
      "function:add_node",
      "function:reset",
      "function:get_performance_report",
      "function:_verify_dag_acyclic",
      "class:WorkerConfig",
      "function:__init__",
      "function:associative_commutative_sum",
      "class:BarrierInfo",
      "class:TaskNode",
      "class:Message",
      "class:ConfluentOrchestrator",
      "function:_can_process",
      "function:_execute_with_seed",
      "function:_record_error",
      "function:merge",
      "function:_prepare_input",
      "function:deterministic_merge",
      "function:_derive_seed"
    ],
    "pattern_matcher.py": [
      "class:PatternMatcher",
      "function:__init__",
      "function:match_patterns"
    ],
    "context_adapter.py": [
      "function:integrate_with_legacy_system",
      "function:validate_context",
      "function:trace_derivation_lineage",
      "function:process_context",
      "function:create_expanded_context",
      "class:ContextualComponent",
      "function:_adapt_to_pdt_context",
      "class:ContextValidationError",
      "function:__init__",
      "function:adapt_for_query_expansion",
      "class:ContextAdapter",
      "function:adapt_for_retrieval"
    ],
    "gw_alignment.py": [
      "function:align_pattern_to_corpus",
      "class:GromovWassersteinAligner",
      "function:__init__",
      "function:align"
    ],
    "total_ordering.py": [
      "function:explain_tie_breaks",
      "function:_directional_value",
      "function:_normalize_score",
      "function:norm_scores_key",
      "function:total_compare",
      "function:serialize_ordered",
      "class:OrderedRecord",
      "function:canonical_json",
      "function:make_total_key",
      "function:_to_canonical",
      "function:sort_total",
      "function:explain_comparison"
    ],
    "submodular_task_selector.py": [
      "function:_dependencies_satisfied",
      "class:SelectionTrace",
      "function:evaluate",
      "function:verify_monotonicity",
      "function:__post_init__",
      "function:get_selection_statistics",
      "function:_invalidate_heap_after_selection",
      "class:SubmodularFunction",
      "class:HeapItem",
      "function:get_approximation_ratio",
      "function:__init__",
      "function:_reset_state",
      "function:_build_candidate_heap",
      "function:__lt__",
      "class:CoverageUtility",
      "function:select_tasks",
      "class:Task",
      "class:MonotonicTaskSelector",
      "function:_get_next_candidate",
      "function:evaluate_set"
    ],
    "permutation_invariant_processor.py": [
      "function:log_sum_exp_pool",
      "function:get_pooler",
      "function:forward",
      "function:_compute_multiset_stats",
      "function:get_verification_summary",
      "class:DeterministicPooler",
      "function:__post_init__",
      "class:PermutationInvariantProcessor",
      "function:mean_pool",
      "function:serialize_multiset",
      "class:AggregationType",
      "class:MultisetStats",
      "function:deserialize_multiset",
      "function:__init__",
      "function:reset_statistics",
      "function:_verify_invariance",
      "function:process_multiset",
      "function:sum_pool",
      "class:DeepSetBlock",
      "class:MultisetSerializer",
      "function:max_pool",
      "class:EquivariantAttention",
      "function:min_pool"
    ],
    "linear_type_enforcer.py": [
      "class:ResourceLeakError",
      "function:consume_context_linearly",
      "function:assert_no_aliasing",
      "function:is_consumed",
      "function:__del__",
      "function:get_linear_enforcer",
      "function:get_active_contexts_count",
      "function:linear_context_scope",
      "function:validate_system_state",
      "class:AliasDetectionError",
      "class:LinearReference",
      "function:linear_operation",
      "function:__init__",
      "class:LinearTypeError",
      "function:check_no_aliasing",
      "function:consume",
      "function:create_linear_reference",
      "function:reference_id",
      "class:LinearTypeEnforcer",
      "function:wrapper",
      "function:consume_reference",
      "function:cleanup_consumed_references"
    ],
    "task_selector_demo.py": [
      "function:demonstrate_dependency_handling",
      "function:plot_selection_analysis",
      "function:evaluate",
      "function:main",
      "function:__init__",
      "function:demonstrate_approximation_guarantees",
      "function:evaluate_set",
      "function:create_software_project_scenario",
      "class:ProjectUtility",
      "function:demonstrate_monotonic_selection"
    ]
  },
  "missing_imports": [],
  "api_endpoints": [],
  "environment_variables": [],
  "todos": [],
  "config_files": {},
  "errors": [],
  "readiness": {
    "ready": false,
    "issues": [
      "No clear entry point found (main.py, app.py, index.js, etc.)",
      "No dependency management file found",
      "No configuration files found",
      "No test files found"
    ],
    "has_entry_point": false,
    "has_dependencies": false,
    "has_tests": false,
    "has_docker": false,
    "has_ci": false
  }
}
